exports.up = async (knex) => {
  await knex.schema
    .createTable('users', (users) => {
      users.increments('user_id')
      users.string('username', 200).notNullable().unique()
      users.string('password', 200).notNullable()
      users.timestamps(false, true)
    })
    .createTable('potlucks', (potlucks) => {
      potlucks.increments('potluck_id')
      potlucks.string('potluck_name', 200).notNullable().unique()
      potlucks.date('potluck_date')
      potlucks.time('potluck_time')
      potlucks.string('potluck_location')
    })
    .createTable('items', (items) => {
        items.increments('item_id')
        items.string('item_name').notNullable()
        items.integer('potluck_id')
          .unsigned()
          .references('potluck_id')
          .inTable('potlucks')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        items.integer('user_id')
          .unsigned()
          .references('user_id')
          .inTable('users')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
      })
    .createTable('users_potlucks', (users_potlucks) => {
      users_potlucks.increments('users_potlucks_id')
      users_potlucks.integer('user_id')
        .unsigned()
        .references('user_id')
        .inTable('users')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
      users_potlucks.integer('potluck_id')
        .unsigned()
        .references('potluck_id')
        .inTable('potlucks')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
      users_potlucks.boolean('is_organizer').defaultTo(false)
      users_potlucks.boolean('is_going').defaultTo(false)
    })
}

exports.down = async (knex) => {
  await knex.schema.dropTableIfExists('users_potlucks')
  await knex.schema.dropTableIfExists('items')
  await knex.schema.dropTableIfExists('potlucks')
  await knex.schema.dropTableIfExists('users')
}
